# -*- coding: utf-8 -*-
"""corporate employee attrition analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15UEJzaJpCsT7FtqqrsY8xUU_PpdObUUK
"""

#Description: This program predicts employee attrition

#Import the libraries
import numpy as np
import pandas as pd
import seaborn as sns

# load the data
from google.colab import files
uploaded = files.upload()

#Store the data int a dataframe
df = pd.read_csv('WA_Fn-UseC_-HR-Employee-Attrition.csv')

#Print the first 100 rows
df.head(100)



#Get the rows and columns
df.shape

#Get the column data types
df.dtypes

# Get a count of the empty values of each column
df.isna().sum()

#Check for any missign or null vlues in the data
df.isnull().values.any()

# View some statistics
df.describe()

#Get  a count of the number of  employee  that stayed and left the company
df['Attrition'].value_counts()

#Visualize the number of employees that stayed and left the company
sns.countplot(df['Attrition'])

#Checking the accuracy
print((1233-237)/1233)

#Show the number of employees that left and stayed by age
import matplotlib.pyplot as plt
plt.subplots(figsize=(12,4))
sns.countplot(x='Age',hue='Attrition',data=df,palette='colorblind')

#Print all of the datatypes and their unique values
for column in df.columns:
  if df[column].dtype == object:
    print(str(column) + ' : ' + str(df[column].unique()))
    print(df[column].value_counts())
    print('_____________________________')

#Removing some unnecessary columns
df=df.drop('Over18',axis=1)
df=df.drop('EmployeeNumber',axis=1)
df=df.drop('StandardHours',axis=1)
df=df.drop('EmployeeCount',axis=1)

#Get the corelation
df.corr()

#Visualize the corelation
plt.figure(figsize=(14,14))
sns.heatmap(df.corr(),annot=True,fmt= '.0%')

#Transform the data
#Transform non-numerical into numerical columns
from sklearn.preprocessing import LabelEncoder
for column in df.columns:
  if df[column].dtype == np.number:
    continue
  df[column] = LabelEncoder().fit_transform(df[column])

#Create a new column
df['Age_Years'] = df['Age']

#Drop the age column 
df = df.drop('Age',axis=1)

#Show the data frame
df

#Split the data
X = df.iloc[:,1:df.shape[1]].values
Y = df.iloc[:,0].values

#Split the data into 75% training and 25% testing
from sklearn.model_selection import train_test_split
X_train, X_test,Y_train, Y_test =train_test_split(X,Y, test_size = 0.25,random_state=0)

# Use the Random forest classifier
from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)
forest.fit(X_train,Y_train)

#Get the accuracy on the training dataset
forest.score(X_train,Y_train)

#Show the confusion matrix and accuracy score for the model on the test data
from sklearn.metrics import confusion_matrix

cm= confusion_matrix(Y_test,forest.predict(X_test))
TN=cm[0][0]
TP=cm[1][1]
FN=cm[1][0]
FP=cm[0][1]

print(cm)
print('Model testing Accuracy = {}'.format((TP+TN) / (TP+TN+FN+FP)))

